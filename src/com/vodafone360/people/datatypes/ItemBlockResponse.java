package com.vodafone360.people.datatypes;

import java.util.Enumeration;
import java.util.Hashtable;

public class ItemBlockResponse extends BaseDataType{

	//identifier of the node as in the request.
	public String refnodeid = null;
	
	//if true then the client can use the cached (and expired) content
	public Boolean usecached = null;
	
	//Time the content can be cached and resued (in seconds) w/o further requests
	public Integer expiretime = null;
	
	//request node (and childs if applicable)
	public StoreItem node = null;
	
	
	/**
	 * Tags associated with Recommended Music Tracks representing data items associated with
	 * it returned from server. 
	 * 
	 */
	public enum Tags {
		REFERENCE_NODE_ID("refnodeid"),
		USE_CACHE("usecached"), 
		EXPIRE_TIME("expiretime"),
		NODE("node");

		private final String tag;

		/**
		 * Constructor creating Tags item for specified String.
		 * 
		 * @param s
		 *            String value for Tags item.
		 */
		private Tags(String s) {
			tag = s;
		}

		/**
		 * String value associated with Tags item.
		 * 
		 * @return String value for Tags item.
		 */
		private String tag() {
			return tag;
		}

		/**
		 * Find Tags item for specified String.
		 * 
		 * @param tag
		 *            String value to find Tags item for
		 * @return Tags item for specified String, null otherwise
		 */
		private static Tags findTag(String tag) {
			for (Tags tags : Tags.values()) {
				if (tag.compareTo(tags.tag()) == 0) {
					return tags;
				}
			}
			return null;
		}
	}

	/**
	 * Sets the value of the member data item associated with the specified tag.
	 * 
	 * @param tag
	 *            Current tag
	 * @param val
	 *            Value associated with the tag
	 * @return void
	 */
	@SuppressWarnings("unchecked")
	private void setValue(Tags tag, Object value) {
		if (tag != null) {
			switch (tag) {
			case REFERENCE_NODE_ID:
				if(value != null)
					refnodeid = (String) value;
				break;
			case USE_CACHE:
				if(value != null)
					usecached= (Boolean) value;
				break;
			case EXPIRE_TIME:
				if(value != null)
					expiretime = (Integer) value;
				break;
			case NODE:
				StoreItem item = StoreItem.createFromHashtable((Hashtable<String, Object>) value);
				node = (StoreItem)item;
		        break;
			default:
				// Do nothing.
				break;
			}
		}
	}

	/**
	 * Create Items from HashTable generated by Hessian-decoder
	 * 
	 * @param hash Hashtable 
	 * @return ItemBlockResponse created from Hashtable
	 * 
	 **/
	public static ItemBlockResponse createFromHashtable(Hashtable<String, Object> hash) {
		ItemBlockResponse blocks = new ItemBlockResponse();
		Enumeration<String> e = hash.keys();
		
		while (e.hasMoreElements()) {
			String key = e.nextElement();
			Object value = hash.get(key);
			Tags tag = Tags.findTag(key);
			blocks.setValue(tag, value);
		}
		return blocks;
	}

	/**
	 * Create Hashtable from ItemBlockResponse parameters.
	 * 
	 * @param none
	 * @return Hashtable generated from ItemBlockResponse parameters.
	 */
	public Hashtable<String, Object> createHashtable() {
		Hashtable<String, Object> htab = new Hashtable<String, Object>();

		if (refnodeid != null) {
			htab.put(Tags.REFERENCE_NODE_ID.tag(), refnodeid);
		}
		if (usecached != null) {
			htab.put(Tags.USE_CACHE.tag(), usecached);
		}
		if (expiretime != null) {
			htab.put(Tags.EXPIRE_TIME.tag(), expiretime);
		}
		if(node != null)
		{
			htab.put(Tags.NODE.tag(),node);
		}
		return htab;
	}

	
	
	@Override
	public int getType() {
		// TODO Auto-generated method stub
		return ITEM_BLOCK_RESPONSE_DATATYPE;
	}

}
