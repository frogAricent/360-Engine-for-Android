
/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at
 * src/com/vodafone360/people/VODAFONE.LICENSE.txt or
 * http://github.com/360/360-Engine-for-Android
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each file and
 * include the License file at src/com/vodafone360/people/VODAFONE.LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the fields
 * enclosed by brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright 2010 Vodafone Sales & Services Ltd.  All rights reserved.
 * Use is subject to license terms.
 */

package com.vodafone360.people.datatypes;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

public class ListOfLong  extends BaseDataType{
	
	public List<Long> mLongList = new ArrayList<Long>();
	
	public int mListSize;
	
	/**
     * Tags representing data items associated with List of Long Values returned from server
     */
    public enum Tags {
    	ALBUM_ID_LIST("albumidlist"),
    	GROUP_ID_LIST("groupidlist"),
    	USER_ID("userid"),
    	APPROVED_REQUESTS("approvedrequests"),
    	REJECTED_REQUESTS("rejectedrequests"),
    	REMOVED_FRIENDS("deleteduserids");

        private final String tag;

        /**
         * Constructor creating Tags item for specified String.
         * 
         * @param s String value for Tags item.
         */
        private Tags(String s) {
            tag = s;
        }

        /**
         * String value associated with Tags item.
         * 
         * @return String value for Tags item.
         */
        private String tag() {
            return tag;
        }

        /**
         * Find Tags item for specified String.
         * 
         * @param tag String value to find Tags item for
         * @return Tags item for specified String, null otherwise
         */
        private static Tags findTag(String tag) {
            for (Tags tags : Tags.values()) {
                if (tag.compareTo(tags.tag()) == 0) {
                    return tags;
                }
            }
            return null;
        }
    }
    
   /* private Tags findTag(String tag) {
        for (Tags tags : Tags.values()) {
            if (tag.compareTo(tags.tag()) == 0) {
                return tags;
            }
        }
        return null;
    }
   */ 
    /**
     * Sets the value of the member data item associated with the specified tag.
     * 
     * @param tag Current tag
     * @param val Value associated with the tag
     */
    @SuppressWarnings("unchecked")
	private void setValue(Tags tag, Object value) {
        if (tag != null) {
            
            switch (tag) {
                
                case ALBUM_ID_LIST:
    	            
                	Vector<Long> albumIdVector = (Vector<Long>)value;
	                 for (Long l : albumIdVector) {
	                	 mLongList.add(l);
	                 }
	                 this.mListSize = mLongList.size();
	 	            
                     break;
                     
                case GROUP_ID_LIST:
                	Vector<Long> groupIdVector = (Vector<Long>)value;
	                 for (Long l : groupIdVector) {
	                	 mLongList.add(l);
	                 }
	                 this.mListSize = mLongList.size();
	 	            break;
                	
                case USER_ID:
                	Long usrid = new Long((Long)value);
                	mLongList.add(usrid);
                	this.mListSize = mLongList.size();
	                break;
                	
                case REMOVED_FRIENDS:
                	//Fall through
                
                case REJECTED_REQUESTS:
                	//Fall through
                	
                case APPROVED_REQUESTS:
                	for (Long userid : (Vector<Long>)value) {
                		mLongList.add(userid);
                	}
                	this.mListSize = mLongList.size();
                	break;
                
                default:
                    // Do nothing.
                    break;
            }
        }
    }

	 /**
     * Create ActivityItem from HashTable generated by Hessian-decoder
     * 
     * @param hash Hashtable representing ActivityItem
     * @return ActivityItem created from Hashtable
     */
    public ListOfLong createFromHashtable(Hashtable<String, Object> hash) {
    	ListOfLong album = new ListOfLong();
        Enumeration<String> e = hash.keys();
        while (e.hasMoreElements()) {
            String key = e.nextElement();
            Object value = hash.get(key);
            
            Tags tag = Tags.findTag(key);
            album.setValue(tag, value);
        }
        return album;
    }

	@Override
	public int getType() {
		// TODO Auto-generated method stub
		return 0;
	}

}
