
/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * You can obtain a copy of the license at
 * src/com/vodafone360/people/VODAFONE.LICENSE.txt or
 * http://github.com/360/360-Engine-for-Android
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each file and
 * include the License file at src/com/vodafone360/people/VODAFONE.LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the fields
 * enclosed by brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 *
 * Copyright 2010 Vodafone Sales & Services Ltd.  All rights reserved.
 * Use is subject to license terms.
 */

package com.vodafone360.people.datatypes;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;

import android.util.Log;

/**
 * BaseDataType encapsulating T&C Text for identities retrieved from Now + server
 */
public class IdentitiesTextResponse extends BaseDataType {

	public List<IdentityText> identityTextList = new ArrayList<IdentityText>();
	public Integer items;
	public Long updated;
	
	/**
	 * Tags associated with T&C Text for identities representing data items associated with
	 * it returned from server. 
	 * 
	 */
	public enum Tags {
		IDENTITY_TEXT("identityText"),
        ITEMS("item"),
        UPDATED("updated"),
        TEXTLIST("textlist");
		
		private final String tag;

		/**
		 * Constructor creating Tags item for specified String.
		 * 
		 * @param s
		 *            String value for Tags item.
		 */
		private Tags(String s) {
			tag = s;
		}

		/**
		 * String value associated with Tags item.
		 * 
		 * @return String value for Tags item.
		 */
		private String tag() {
			return tag;
		}

		/**
		 * Find Tags item for specified String.
		 * 
		 * @param tag
		 *            String value to find Tags item for
		 * @return Tags item for specified String, null otherwise
		 */
		private static Tags findTag(String tag) {
			for (Tags tags : Tags.values()) {
				if (tag.compareTo(tags.tag()) == 0) {
					return tags;
				}
			}
			return null;
		}
	}

	/**
	 * Sets the value of the member data item associated with the specified tag.
	 * 
	 * @param tag
	 *            Current tag
	 * @param val
	 *            Value associated with the tag
	 * @return void
	 */
	private void setValue(Tags tag, Object value) {
		if (tag != null) {
			switch (tag) {
			 case IDENTITY_TEXT:
			 case TEXTLIST:
                 Vector<Hashtable<String, Object>> v = (Vector<Hashtable<String, Object>>)value;
                 for (Hashtable<String, Object> hash : v) {
                     identityTextList.add(IdentityText.createFromHashtable(hash));
                 }
                     break;
			case ITEMS:
				items = (Integer)value;
				break;
			 case UPDATED:
                  updated = (Long)value;
                  break;
			default:
				// Do nothing.
				break;
			}
		}
	}

	/**
     * Create ActivityItem from HashTable generated by Hessian-decoder
     * 
     * @param hash Hashtable representing ActivityItem
     * @return ActivityItem created from Hashtable
     */
    static public IdentitiesTextResponse createFromHashtable(Hashtable<String, Object> hash) {
    	IdentitiesTextResponse identityListResponse = new IdentitiesTextResponse();
        Enumeration<String> e = hash.keys();
        while (e.hasMoreElements()) {
            String key = e.nextElement();
            Object value = hash.get(key);
            //Log.d("Get Identity Text", "createFromHashtable: Key " + key + "value: " + value);
            Tags tag = Tags.findTag(key);
            identityListResponse.setValue(tag, value);
        }
        return identityListResponse;
    }
    
    /**
     * Create Hashtable from GroupItem parameters.
     * 
     * @return Hashtable generated from GroupItem parameters.
     */
    public Hashtable<String, Object> createHashtable() {
        Hashtable<String, Object> htab = new Hashtable<String, Object>();

        if (items != null) {
            htab.put(Tags.ITEMS.tag(), items);
        }
        if (identityTextList != null) {
        	 Vector<Object> v = new Vector<Object>();
             for (int i = 0; i < identityTextList.size(); i++) {
                v.add(identityTextList.get(i).createHashtable());
             }
             htab.put(Tags.IDENTITY_TEXT.tag(), v);
        }
        if (updated != null) {
            htab.put(Tags.UPDATED.tag(), updated);
        }
        return htab;
    }

	@Override
	public int getType() {
		return GET_IDENTITIES_TEXT_RESPONSE;
	}
}
